"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.10.dev20151105093325.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

import os
import socket
import csv
from collections import defaultdict

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
IS_PRODUCTION=socket.gethostname()=='tengi.nfshost.com'
if IS_PRODUCTION:
    with open('/home/conf/secret_key.txt') as f:
        SECRET_KEY = f.read().strip()
else:
    SECRET_KEY='0g0@=-76tj^a3m*6jm0=-9l)35#k%w2s#bmb3'

# SECURITY WARNING: don't run with debug turned on in production!
if IS_PRODUCTION:
    DEBUG=False
else:
    DEBUG=True
#DEBUG = os.environ.get("DEBUG",False) 

ALLOWED_HOSTS = ['www.always-a-programmer.com','localhost']


# Application definition

INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

#STATIC_URL = '/static/'

AWS_STORAGE_BUCKET_NAME = 'always-a-programmer'
AWS_CLOUDFRONT_DOMAIN = 'dvbg2t7tkoa4y.cloudfront.net'

columns = defaultdict(list) # each value in each column is appended to a list

if IS_PRODUCTION :
    fname='/home/conf/credentials.csv'
else:
    fname='/Users/tengi/mysite/conf/credentials.csv'

with open(fname) as f:
    reader = csv.DictReader(f) # read rows into a dictionary format
    for row in reader: # read a row as {column1: value1, column2: value2,...}
        for (k,v) in row.items(): # go over each column name and value 
            columns[k].append(v) # append the value into the appropriate list
                                 # based on column name k
AWS_ACCESS_KEY_ID = columns['Access key ID'][0]
AWS_SECRET_ACCESS_KEY = columns['Secret access key'][0]
# Tell django-storages that when coming up with the URL for an item in S3 storage, keep
# it simple - just use this domain plus the path. (If this isn't set, things get complicated).
# This controls how the `static` template tag from `staticfiles` gets expanded, if you're using it.
# We also use it in the next setting.
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

# This is used by the `static` template tag from `static`, if you're using that. Or if anything else
# refers directly to STATIC_URL. So it's safest to always set it.


if IS_PRODUCTION or os.environ.get('PUSH_S3'):
    #STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
    STATIC_URL="https://%s/" % AWS_CLOUDFRONT_DOMAIN
    # Tell the staticfiles app to use S3Boto storage when writing the collected static files (when
    # you run `collectstatic`).
    STATICFILES_STORAGE = 'mysite.customStorages.StaticStorage'
    #STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
else:
    STATIC_URL='/static/'

STATICFILES_DIRS=[
        os.path.join(BASE_DIR,'common_static'),
        ]
STATIC_ROOT=os.path.join(BASE_DIR,'collected_static')
STATICFILES_FINDERS = [  
'django.contrib.staticfiles.finders.FileSystemFinder',     
'django.contrib.staticfiles.finders.AppDirectoriesFinder',   
]   
